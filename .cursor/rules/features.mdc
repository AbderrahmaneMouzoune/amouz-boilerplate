# Cursor Rules pour Génération de Fonctionnalités Next.js

## 1. Schéma de Données (TypeScript avec Zod)

```typescript
// @cursor-rule: generate-schema
import { z } from "zod";

export const ${1:nomEntité}Schema = z.object({
  id: z.number().optional(),
  ${2:// Autres champs}
});

export type ${3:NomEntité} = z.infer<typeof ${1:nomEntité}Schema>;

export const create${3:NomEntité}Schema = ${1:nomEntité}Schema.omit({
  id: true,
  ${4:// Autres champs à omettre si nécessaire}
});

export type Create${3:NomEntité}Input = z.infer<typeof create${3:NomEntité}Schema>;

export const update${3:NomEntité}Schema = ${1:nomEntité}Schema.partial().extend({
  id: z.number(),
  ${5:// Autres champs obligatoires}
});

export type Update${3:NomEntité}Input = z.infer<typeof update${3:NomEntité}Schema>;
```

## 2. Repository (CRUD et opérations spécifiques)

```typescript
// @cursor-rule: generate-repository
import { ${1:NomEntité}, Create${1:NomEntité}Input, Update${1:NomEntité}Input } from "../schemas/${2:nom-entité}.schema";
${3:// Importer les dépendances nécessaires (supabase, client API, etc.)}

export class ${1:NomEntité}Repository {
  /**
   * Récupère tous les ${4:nomEntités}
   */
  static async getAll(): Promise<${1:NomEntité}[]> {
    ${5:// Implémentation de la récupération de tous les éléments}
    return [];
  }

  /**
   * Récupère un ${4:nomEntité} par son ID
   */
  static async getById(id: number): Promise<${1:NomEntité} | null> {
    ${6:// Implémentation de la récupération par ID}
    return null;
  }

  /**
   * Crée un nouveau ${4:nomEntité}
   */
  static async create(input: Create${1:NomEntité}Input): Promise<${1:NomEntité}> {
    ${7:// Implémentation de la création}
    return { id: 1, ...input } as ${1:NomEntité};
  }

  /**
   * Met à jour un ${4:nomEntité} existant
   */
  static async update(input: Update${1:NomEntité}Input): Promise<${1:NomEntité}> {
    ${8:// Implémentation de la mise à jour}
    return { ...input } as ${1:NomEntité};
  }

  /**
   * Supprime un ${4:nomEntité}
   */
  static async delete(id: number): Promise<void> {
    ${9:// Implémentation de la suppression}
  }

  ${10:// Autres méthodes spécifiques au besoin}
}
```

## 3. Server Actions (avec UseCase)

```typescript
// @cursor-rule: generate-server-actions
"use server";

import { authenticatedAction } from "@lib/safe-action";
import { revalidatePath } from "next/cache";
import { z } from "zod";
import { ROUTES } from "@config/routes";
import { ${1:NomEntité}Repository } from "@data-access/repositories/${2:nom-entité}.repository";
import { Create${1:NomEntité}Input, Update${1:NomEntité}Input } from "@data-access/schemas/${2:nom-entité}.schema";
import { User } from "@data-access/schemas/user.schema";
import { NotFoundError, AuthenticationError, PublicError } from "@use-cases/errors";

// Use Cases (logique métier)
export async function get${1:NomEntité}ByIdUseCase(
  user: User | undefined,
  ${3:nomEntité}Id: number
) {
  // Récupération de l'entité
  const ${3:nomEntité} = await ${1:NomEntité}Repository.getById(${3:nomEntité}Id);

  // Vérifier si l'entité existe
  if (!(${3:nomEntité})) {
    throw new NotFoundError("${1:NomEntité} not found");
  }

  // Vérification des autorisations si nécessaire
  ${4:// Exemple:
  // if (user?.id !== ${3:nomEntité}.userId && !user?.isAdmin) {
  //   throw new AuthenticationError();
  // }}

  return ${3:nomEntité};
}

export async function create${1:NomEntité}UseCase(
  user: User,
  input: Create${1:NomEntité}Input
) {
  // Vérification des autorisations si nécessaire
  if (!user) {
    throw new AuthenticationError();
  }

  // Logique métier et validation supplémentaire
  ${5:// Exemple:
  // const existingEntity = await ${1:NomEntité}Repository.findByUniqueField(input.uniqueField);
  // if (existingEntity) {
  //   throw new PublicError("${1:NomEntité} with this unique field already exists");
  // }}

  // Appel au repository
  try {
    return await ${1:NomEntité}Repository.create({
      ...input,
      userId: user.id,
      ${6:// Ajouter les champs supplémentaires (userId, etc.)}
    });
  } catch (error) {
    // Gestion des erreurs spécifiques
    throw new PublicError("Failed to create ${1:NomEntité}");
  }
}

export async function update${1:NomEntité}UseCase(
  user: User,
  input: Update${1:NomEntité}Input
) {
  // Vérification des autorisations si nécessaire
  if (!user) {
    throw new AuthenticationError();
  }

  // Récupérer l'entité existante pour vérifier les permissions
  const existingEntity = await get${1:NomEntité}ByIdUseCase(user, input.id);

  // Vérifier que l'utilisateur peut modifier cette entité
  ${7:// Exemple:
  // if (existingEntity.userId !== user.id && !user.isAdmin) {
  //   throw new AuthenticationError();
  // }}

  // Logique métier

  // Appel au repository
  try {
    return await ${1:NomEntité}Repository.update(input);
  } catch (error) {
    // Gestion des erreurs spécifiques
    throw new PublicError("Failed to update ${1:NomEntité}");
  }
}

export async function delete${1:NomEntité}UseCase(
  user: User,
  input: { ${3:nomEntité}Id: number }
) {
  // Vérification des autorisations si nécessaire
  if (!user) {
    throw new AuthenticationError();
  }

  // Récupérer l'entité existante pour vérifier les permissions
  const existingEntity = await get${1:NomEntité}ByIdUseCase(user, input.${3:nomEntité}Id);

  // Vérifier que l'utilisateur peut supprimer cette entité
  ${8:// Exemple:
  // if (existingEntity.userId !== user.id && !user.isAdmin) {
  //   throw new AuthenticationError();
  // }}

  // Appel au repository
  try {
    await ${1:NomEntité}Repository.delete(input.${3:nomEntité}Id);
  } catch (error) {
    // Gestion des erreurs spécifiques
    throw new PublicError("Failed to delete ${1:NomEntité}");
  }
}

// Server Actions (exposées pour utilisation dans l'interface)
export const create${1:NomEntité}Action = authenticatedAction
  .createServerAction()
  .input(
    z.object({
      ${9:// définir le schéma de l'input}
    })
  )
  .handler(async ({ input, ctx }) => {
    const result = await create${1:NomEntité}UseCase(ctx.user, {
      ${10:// mapper input vers les paramètres requis}
    });
    revalidatePath(ROUTES.${11:ROUTE_ASSOCIÉE});
    return result;
  });

export const update${1:NomEntité}Action = authenticatedAction
  .createServerAction()
  .input(
    z.object({
      id: z.number(),
      ${12:// définir le schéma de l'input}
    })
  )
  .handler(async ({ input, ctx }) => {
    const result = await update${1:NomEntité}UseCase(ctx.user, {
      ${13:// mapper input vers les paramètres requis}
    });
    revalidatePath(ROUTES.${11:ROUTE_ASSOCIÉE});
    return result;
  });

export const delete${1:NomEntité}Action = authenticatedAction
  .createServerAction()
  .input(
    z.object({
      ${3:nomEntité}Id: z.number(),
    })
  )
  .handler(async ({ input, ctx }) => {
    await delete${1:NomEntité}UseCase(ctx.user, {
      ${3:nomEntité}Id: input.${3:nomEntité}Id,
    });
    revalidatePath(ROUTES.${11:ROUTE_ASSOCIÉE});
  });
```

## 4. Formulaire Hook

```typescript
// @cursor-rule: generate-form-hook
"use client";

import { useTransition } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "@components/ui/use-toast";
import { create${1:NomEntité}Action, update${1:NomEntité}Action, delete${1:NomEntité}Action } from "@use-cases/${2:nom-entité}.server";
import { ${1:NomEntité} } from "@data-access/schemas/${2:nom-entité}.schema";
import { useAction } from "@lib/safe-action";

// Schéma pour le formulaire de création
const create${1:NomEntité}FormSchema = z.object({
  ${3:// Définir le schéma du formulaire de création}
});

type Create${1:NomEntité}FormValues = z.infer<typeof create${1:NomEntité}FormSchema>;

// Schéma pour le formulaire de mise à jour
const update${1:NomEntité}FormSchema = z.object({
  id: z.number(),
  ${4:// Définir le schéma du formulaire de mise à jour}
});

type Update${1:NomEntité}FormValues = z.infer<typeof update${1:NomEntité}FormSchema>;

interface Use${1:NomEntité}FormProps {
  initialData?: ${1:NomEntité} | null;
  onSuccess?: () => void;
}

export function use${1:NomEntité}Form({ initialData, onSuccess }: Use${1:NomEntité}FormProps = {}) {
  const [isPending, startTransition] = useTransition();
  const isEditing = !!initialData;

  // Hook pour l'action de création
  const { execute: executeCreate, result: createResult } = useAction(create${1:NomEntité}Action);

  // Hook pour l'action de mise à jour
  const { execute: executeUpdate, result: updateResult } = useAction(update${1:NomEntité}Action);

  // Hook pour l'action de suppression
  const { execute: executeDelete, result: deleteResult } = useAction(delete${1:NomEntité}Action);

  // Formulaire avec React Hook Form
  const form = useForm<Create${1:NomEntité}FormValues | Update${1:NomEntité}FormValues>({
    resolver: zodResolver(isEditing ? update${1:NomEntité}FormSchema : create${1:NomEntité}FormSchema),
    defaultValues: isEditing
      ? {
          id: initialData.id,
          ${5:// autres champs avec valeurs initiales}
        }
      : {
          ${6:// valeurs par défaut pour la création}
        },
  });

  const onSubmit = (values: Create${1:NomEntité}FormValues | Update${1:NomEntité}FormValues) => {
    startTransition(async () => {
      try {
        if (isEditing) {
          await executeUpdate(values as Update${1:NomEntité}FormValues);
          toast({
            title: "Succès",
            description: "${1:NomEntité} mis à jour avec succès",
          });
        } else {
          await executeCreate(values as Create${1:NomEntité}FormValues);
          toast({
            title: "Succès",
            description: "${1:NomEntité} créé avec succès",
          });
          form.reset();
        }

        if (onSuccess) {
          onSuccess();
        }
      } catch (error) {
        toast({
          title: "Erreur",
          description: "Une erreur est survenue",
          variant: "destructive",
        });
      }
    });
  };

  const onDelete = (id: number) => {
    startTransition(async () => {
      try {
        await executeDelete({ ${7:nomEntité}Id: id });
        toast({
          title: "Succès",
          description: "${1:NomEntité} supprimé avec succès",
        });

        if (onSuccess) {
          onSuccess();
        }
      } catch (error) {
        toast({
          title: "Erreur",
          description: "Une erreur est survenue lors de la suppression",
          variant: "destructive",
        });
      }
    });
  };

  return {
    form,
    isEditing,
    isPending,
    onSubmit: form.handleSubmit(onSubmit),
    onDelete,
    createResult,
    updateResult,
    deleteResult,
  };
}
```

## 5. Composant de Formulaire UI

```typescript
// @cursor-rule: generate-form-component
"use client";

import { Button } from "@components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@components/ui/form";
import { Input } from "@components/ui/input";
import { Textarea } from "@components/ui/textarea";
import { use${1:NomEntité}Form } from "@use-cases/${2:nom-entité}.form";
import { ${1:NomEntité} } from "@data-access/schemas/${2:nom-entité}.schema";

interface ${1:NomEntité}FormProps {
  initialData?: ${1:NomEntité} | null;
  onSuccess?: () => void;
}

export function ${1:NomEntité}Form({ initialData, onSuccess }: ${1:NomEntité}FormProps) {
  const { form, isEditing, isPending, onSubmit } = use${1:NomEntité}Form({
    initialData,
    onSuccess,
  });

  return (
    <Form {...form}>
      <form onSubmit={onSubmit} className="space-y-6">
        {/* Champs du formulaire */}
        ${3:// Insérer ici les champs du formulaire}
        <FormField
          control={form.control}
          name="${4:champNom}"
          render={({ field }) => (
            <FormItem>
              <FormLabel>${5:Libellé du champ}</FormLabel>
              <FormControl>
                <Input placeholder="${6:Placeholder}..." {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        ${7:// Plus de champs selon les besoins}

        <Button type="submit" disabled={isPending} className="mr-2">
          {isPending ? "En cours..." : isEditing ? "Mettre à jour" : "Créer"}
        </Button>
        
        {isEditing && (
          <Button 
            type="button" 
            variant="destructive" 
            onClick={() => form.getValues("id") && onDelete(form.getValues("id") as number)}
            disabled={isPending}
          >
            Supprimer
          </Button>
        )}
      </form>
    </Form>
  );
}
```

## 6. Composant de Liste

```typescript
// @cursor-rule: generate-list-component
"use client";

import { useRouter } from "next/navigation";
import { Button } from "@components/ui/button";
import { ${1:NomEntité} } from "@data-access/schemas/${2:nom-entité}.schema";
import { ROUTES } from "@config/routes";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@components/ui/table";

interface ${1:NomEntité}ListClientProps {
  ${3:nomEntités}: ${1:NomEntité}[];
}

export function ${1:NomEntité}ListClient({ ${3:nomEntités} }: ${1:NomEntité}ListClientProps) {
  const router = useRouter();

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">Liste des ${3:nomEntités}</h2>
        <Button onClick={() => router.push(ROUTES.${4:ROUTE_CREATE})}>
          Créer un ${5:nomEntité}
        </Button>
      </div>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>ID</TableHead>
            ${6:// Autres en-têtes de colonnes}
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {${3:nomEntités}.length === 0 ? (
            <TableRow>
              <TableCell colSpan={3} className="text-center">
                Aucun ${5:nomEntité} trouvé
              </TableCell>
            </TableRow>
          ) : (
            ${3:nomEntités}.map((item) => (
              <TableRow key={item.id}>
                <TableCell>{item.id}</TableCell>
                ${7:// Autres cellules selon les champs de l'entité}
                <TableCell>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => router.push(`${ROUTES.${8:ROUTE_BASE}}/${item.id}`)}
                  >
                    Éditer
                  </Button>
                </TableCell>
              </TableRow>
            ))
          )}
        </TableBody>
      </Table>
    </div>
  );
}
```

## 7. Page de Liste (Server Component)

```typescript
// @cursor-rule: generate-list-page
import { Suspense } from "react";
import { ${1:NomEntité}ListClient } from "@components/${2:nom-entité}/${2:nom-entité}-list-client";
import { ListSkeleton } from "@components/ui/list-skeleton";
import { ${1:NomEntité}Repository } from "@data-access/repositories/${2:nom-entité}.repository";

async function ${1:NomEntité}List() {
  const ${3:nomEntités} = await ${1:NomEntité}Repository.getAll();
  
  return <${1:NomEntité}ListClient ${3:nomEntités}={${3:nomEntités}} />;
}

export default function ${1:NomEntité}ListPage() {
  return (
    <div className="container py-10">
      <h1 className="text-3xl font-bold mb-6">${4:Libellé des entités}</h1>
      <Suspense fallback={<ListSkeleton />}>
        <${1:NomEntité}List />
      </Suspense>
    </div>
  );
}
```

## 8. Page de Création (Server Component)

```typescript
// @cursor-rule: generate-create-page
import { ${1:NomEntité}Form } from "@components/${2:nom-entité}/${2:nom-entité}-form";

export default function Create${1:NomEntité}Page() {
  return (
    <div className="container py-10">
      <h1 className="text-3xl font-bold mb-6">Créer un nouveau ${3:libellé entité}</h1>
      <${1:NomEntité}Form />
    </div>
  );
}
```

## 9. Page de Détail/Modification (Server Component)

```typescript
// @cursor-rule: generate-edit-page
import { notFound } from "next/navigation";
import { Suspense } from "react";
import { ${1:NomEntité}Form } from "@components/${2:nom-entité}/${2:nom-entité}-form";
import { FormSkeleton } from "@components/ui/form-skeleton";
import { get${1:NomEntité}ByIdUseCase } from "@use-cases/${2:nom-entité}.server";

interface PageProps {
  params: {
    id: string;
  };
}

async function ${1:NomEntité}Detail({ id }: { id: number }) {
  try {
    const ${3:nomEntité} = await get${1:NomEntité}ByIdUseCase(undefined, id);
    
    return <${1:NomEntité}Form initialData={${3:nomEntité}} />;
  } catch (error) {
    notFound();
  }
}

export default async function Edit${1:NomEntité}Page({ params }: PageProps) {
  const id = parseInt(params.id);

  if (isNaN(id)) {
    notFound();
  }

  return (
    <div className="container py-10">
      <h1 className="text-3xl font-bold mb-6">Modifier ${4:libellé entité}</h1>
      <Suspense fallback={<FormSkeleton />}>
        <${1:NomEntité}Detail id={id} />
      </Suspense>
    </div>
  );
}
```

## 10. Mise à jour des Routes

```typescript
// @cursor-rule: generate-routes-update
// Ajouter ces routes à votre fichier src/config/routes.ts

export const ROUTES = {
  // Routes existantes...
  
  // Nouvelles routes pour ${1:NomEntité}
  ${2:NOM_ROUTE_BASE}: "/${3:chemin-entité}",
  ${4:NOM_ROUTE_CREATE}: "/${3:chemin-entité}/create",
  ${5:NOM_ROUTE_EDIT}: "/${3:chemin-entité}/[id]",
} as const;
```

## 11. Mise à jour des Cache Tags

```typescript
// @cursor-rule: generate-cache-tags-update
// Ajouter ces tags à votre fichier src/config/cache-tags.ts

export const CACHE_TAGS = {
  // Tags existants...
  
  // Nouveaux tags pour ${1:NomEntité}
  ${2:NOM_TAG_LISTE}: "${3:nom-entité}-list",
  ${4:NOM_TAG_DETAIL}: "${3:nom-entité}-[id]",
} as const;
```